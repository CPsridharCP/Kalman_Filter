import numpy as np 

def filter(x, P):
    for Z in measurements:
        
        # prediction
        x = (F * x) + u
        P = F*P*F.transpose() + Q

        # measurement update
        y = np.matrix(Z).transpose() - (H*x)
        S = H * P * H.transpose() + R
        K = P * H.transpose() * np.linalg.inv(S)
        x = x + (K * y)
        P = (I - (K * H)) * P

        print (x[0])

    print ('x= ',x)    
    print ('P= ',P)
    #print ('y= ',y)
    #print ('S= ',S)
    #print ('K= ',K)
    return x

measurements = [[5., 10.], [6., 8.], [7., 6.], [8., 4.], [9., 2.], [10., 0.],[10., 0.],[10., 0.],[10., 0.],[10., 0.],[10., 0.],[10., 0.],[10., 0.],[10., 0.]]
#measurements = [[35.0,67.0 ],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,67.0],[35.0,64.0],[35.0,64.0],[35.0,63.0],[35.0,60.0],[35.0,58.0],[35.0,55.0],[35.0,54.0],[35.0,52.0],[35.0,51.0],[35.0,48.0],[35.0,48.0],[35.0,46.0],[35.0,45.0],[35.0,42.0],[35.0,41.0],[35.0,38.0],[35.0,37.0],[35.0,35.0],[34.0,33.0],[34.0,31.0],[34.0,30.0],[34.0,27.0],[34.0,27.0],[34.0,25.0],[34.0,25.0],[33.0,24.0],[33.0,24.0]]
initial_xy = measurements[0]

# Replace this with time take for each iteration
dt = 0.5

x = np.matrix([[initial_xy[0]], [initial_xy[1]], [0.], [0.]]) # initial state (location and velocity)
u = np.matrix([[0.], [0.], [0.], [0.]]) # external motion

P = np.matrix([[0. ,0.,0.,0.],[0.,0.,0.,0.],[0.,0.,100.,0.],[0.,0.,0.,100.]]) # initial uncertainty
F = np.matrix([[1.0,0.0,dt,0.0],[0.0,1.0,0.0,dt],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]) # next state function
H = np.matrix([[1.,0.0,0.0,0.0],[0.0,1.0,0.0,0.0]]) # measurement function
R = np.matrix([[0.001,0.0],[0.0,0.001]]) # measurement uncertainty
Q = np.matrix([[0.001,0.0,0.0,0.0],[0.0,0.001,0.0,0.0],[0.0,0.0,0.001,0.0],[0.0,0.0,0.0,0.001]]) # process noise
I = np.matrix([[1.0,0.,0.,0.],[.0,1.0,.0,.0],[.0,.0,1.0,.0],[.0,.0,.0,1.0]]) # identity matrix

#print (P)
#print (F)
#print (H)
#print (R)
#print (I)

filter(x,P)

# Some data from real robot
#sample = "x: 35.0y: 67.0 z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 67.0z: 0.0---x: 35.0y: 64.0z: 0.0---x: 35.0y: 64.0z: 0.0---x: 35.0y: 63.0z: 0.0---x: 35.0y: 60.0z: 0.0---x: 35.0y: 58.0z: 0.0---x: 35.0y: 55.0z: 0.0---x: 35.0y: 54.0z: 0.0---x: 35.0y: 52.0z: 0.0---x: 35.0y: 51.0z: 0.0---x: 35.0y: 48.0z: 0.0---x: 35.0y: 48.0z: 0.0---x: 35.0y: 46.0z: 0.0---x: 35.0y: 45.0z: 0.0---x: 35.0y: 42.0z: 0.0---x: 35.0y: 41.0z: 0.0---x: 35.0y: 38.0z: 0.0---x: 35.0y: 37.0z: 0.0---x: 35.0y: 35.0z: 0.0---x: 34.0y: 33.0z: 0.0---x: 34.0y: 31.0z: 0.0---x: 34.0y: 30.0z: 0.0---x: 34.0y: 27.0z: 0.0---x: 34.0y: 27.0z: 0.0---x: 34.0y: 25.0z: 0.0---x: 34.0y: 25.0z: 0.0---x: 33.0y: 24.0z: 0.0---x: 33.0y: 24.0"
#sample = sample.replace("x: ","[")
#sample =sample.replace("y: ",",")
#sample =sample.replace("z: 0.0","]")
#sample =sample.replace("---",",")
#print(sample)